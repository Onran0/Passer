package com.github.onran0.passer.cli.commands;

import com.github.onran0.passer.cli.commands.core.NonOptionArgumentsParser;
import com.github.onran0.passer.cli.commands.core.PasswordBasedCommand;
import com.github.onran0.passer.core.PasserCore;
import com.github.onran0.passer.core.PasswordInfo;
import com.github.onran0.passer.core.PasswordType;
import com.github.onran0.passer.security.RuntimeSecurity;

import joptsimple.OptionParser;
import joptsimple.OptionSet;
import joptsimple.util.EnumConverter;

import java.util.Arrays;

public class AddCommand extends PasswordBasedCommand {

    @Override
    protected boolean openedFileRequired() { return true; }

    @Override
    protected void initializeParser(OptionParser parser, NonOptionArgumentsParser arguments) {
        parser.acceptsAll(Arrays.asList("c", "cap", "caption"), "Caption of password")
                .withRequiredArg()
                .ofType(String.class)
                .required();

        parser.acceptsAll(Arrays.asList("l", "log", "login"), "Login of password")
                .withRequiredArg()
                .ofType(String.class);

        parser.acceptsAll(Arrays.asList("s", "srv", "service"), "Service of password")
                .withRequiredArg()
                .ofType(String.class);

        parser.acceptsAll(Arrays.asList("g", "gen", "generate"), "Specify that the password should be generated automatically");

        parser.acceptsAll(Arrays.asList("t", "type"), "Type of password")
                .withRequiredArg()
                .withValuesConvertedBy(new EnumConverter<>(PasswordType.class) {
                    @Override
                    public PasswordType convert(String value) {
                        return PasswordType.fromName(value.toLowerCase());
                    }
                });
    }

    @Override
    protected void execute(OptionSet options) {
        char[] caption = ((String) options.valueOf("caption")).toCharArray();
        char[] login = options.has("login")
                ? ((String) options.valueOf("login")).toCharArray()
                : PasserCore.MISSING_PROPERTY_DEFAULT.clone();
        char[] service = options.has("service")
                ? ((String) options.valueOf("service")).toCharArray()
                : PasserCore.MISSING_PROPERTY_DEFAULT.clone();

        PasswordType type = (PasswordType) options.valueOf("t");

        if(type == null)
            type = PasswordType.TEXT;

        byte[] password = null;

        if(!options.has("generate")) {
            char[] passwordInput = requestPassword(type == PasswordType.BINARY);

            password = extractBytesFromInputPassword(passwordInput, new int[] { type.getID() });

            RuntimeSecurity.clear(passwordInput);

            if(password == null) {
                invalidUsage("incorrect command usage");
                return;
            }
        }

        boolean isAutogeneratedPassword = password == null;

        if(password == null)
            password = generatePassword(new int[] { type.getID() });

        long creationTime = System.currentTimeMillis();

        this.getCore().getPasses().getPasses().add(new PasswordInfo(
                caption.clone(),
                service,
                login,
                new boolean[] { isAutogeneratedPassword },
                new int[] { type.ordinal() },
                password,
                new long[] { creationTime },
                new long[] { creationTime }
        ));

        out().printf("new password with caption \"%s\" successfully added and its id is \"%d\"\n", String.valueOf(caption), this.getCore().getPasses().getPasses().size() - 1);

        this.getCore().setUnsaved();
    }
}