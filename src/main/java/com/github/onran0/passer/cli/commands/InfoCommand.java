package com.github.onran0.passer.cli.commands;

import com.github.onran0.passer.cli.commands.core.Command;

import com.github.onran0.passer.cli.commands.core.NonOptionArgumentsParser;
import com.github.onran0.passer.core.PasswordInfo;
import com.github.onran0.passer.core.PasswordType;

import com.github.onran0.passer.security.RuntimeSecurity;

import joptsimple.OptionParser;
import joptsimple.OptionSet;

import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;

public class InfoCommand extends Command {

    @Override
    protected boolean openedFileRequired() { return true; }

    private String formatTimestamp(long utc) {
        var zone = ZoneId.systemDefault();

        return "%s (UTC%+d:00)".formatted(
                LocalDateTime.ofInstant(
                    Instant.ofEpochSecond(utc/1000),
                    zone
                ).format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")),
                zone.getRules().getOffset(Instant.ofEpochSecond(utc)).getTotalSeconds() / 3600
        );
    }

    @Override
    protected void initializeParser(OptionParser parser, NonOptionArgumentsParser arguments) {
        arguments.addArgument("id", Integer.class, "Password ID", true);
    }

    @Override
    protected void execute(OptionSet options) {
        int id = (Integer) getArgumentsParser().get(0);

        PasswordInfo passwordInfo = getCore().getPasses().getPasses().get(id);

        char[] caption = passwordInfo.getCaption();
        char[] login = passwordInfo.getLogin();
        char[] service = passwordInfo.getService();

        int[] passwordType = passwordInfo.getPasswordType();
        boolean[] isAutogeneratedPassword = passwordInfo.isAutogeneratedPassword();
        long[] creationTime = passwordInfo.getCreationTime();
        long[] modificationTime = passwordInfo.getModificationTime();
        PasswordType typeEnum = PasswordType.fromID(passwordType[0]);

        out().print("caption: ");
        out().print(caption);

        out().print("\nlogin: ");
        out().print(login);

        out().print("\nservice: ");
        out().print(service);

        out().print("\npassword type: " + (typeEnum == null ? "undefined" : typeEnum.getName()));

        out().print("\nis password autogenerated: " + isAutogeneratedPassword[0]);

        out().printf("\ncreation time: %s", formatTimestamp(creationTime[0]));
        out().printf("\nmodification time: %s", formatTimestamp(modificationTime[0]));
        out().println();

        RuntimeSecurity.clear(caption);
        RuntimeSecurity.clear(service);
        RuntimeSecurity.clear(login);
        RuntimeSecurity.clear(isAutogeneratedPassword);
        RuntimeSecurity.clear(passwordType);
        RuntimeSecurity.clear(creationTime);
        RuntimeSecurity.clear(modificationTime);
    }
}